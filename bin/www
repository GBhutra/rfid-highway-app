#!/usr/bin/env node
var app = require('../app');
var debug = require('debug')('rfidhwyapp:server');
var http = require('http');
var stdio = require('stdio');

// defined locally 
var models = require('../models');
var fh = require('../file_handler.js');
var io = require('../sockets.js').io;
var view = require('../reader_view.js');
var gps = require('../gps_reader.js');
var reader = require('../rfid_reader.js');

var log = true;
var port = 3200;
var server = http.createServer(app);


models.sequelize.sync({force:true}).then(function() {
  if (log) {  console.log("Database initialized !! :D "); }
  app.set('port', port);

  gps.Initialize();

  io.listen(server.listen(port));
  server.on('error', onError);
  server.on('listening', onListening);

  fh.createDBFromFile("Riverside2.csv", models);

  CLIStart();
});

function CLIStart() {
  stdio.question('Input Data ?', function (err, input) {
    if('gps'==input)  {
      stdio.question('Lat :', function (err, Lat) {
        stdio.question('Lon :', function (err, Lon) {
          console.log('Lat: '+Lat+' Lon: '+Lon);
          gps.TestWithCoordinates(Lat,Lon);
        });
      });
    }
    if('rfid'==input)  {
      stdio.question('Tag :', function (err, Tag) {
        console.log('Tag: '+Tag);
        reader.TestWithTag({tagID: Tag});
      });
    }
    CLIStart();
  });
}

function onErr(err) {
    console.log(err);
    return 1;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
