#!/usr/bin/env node
var app = require('../app');
var debug = require('debug')('rfidhwyapp:server');
var http = require('http');
var stdio = require('stdio');



// defined locally 
//var models = require('../models');
//var invtryMgr = require('../middleware/inventoryManager.js');
var cntrlr = require('../controller.js');
//var gps = require('../middleware/gpsReader.js');
var rfid = require('../middleware/rfidReader.js');

var log = true;
var port = 3200;
var server = http.createServer(app);


//models.sequelize.sync({force:true}).then(function() {
  app.set('port', port);
  //invtryMgr.initializeDB("inventory");
  
  //gps.addObserver(cntrlr.gpsObserver);
  rfid.reader.addObserver(cntrlr.readerObserver);

  cntrlr.io.listen(server.listen(port));
  server.on('error', onError);
  server.on('listening', onListening);
  //CLIStart(null);
//});

/*function CLIStart(data) {
  console.log("Selected Input: "+data);
  if ('1'==data) {
    stdio.question('Lat :', function (err, Lat) {
      stdio.question('Lon :', function (err, Lon) {
        console.log('Lat: '+Lat+' Lon: '+Lon);
        gps.gpsSimulate(Lat,Lon);
        CLIStart(null);
      });
    });
  }
  else if ('2'==data)  {
    stdio.question('\nInput Data? \n(1) ACTIVE\n(2) IDLE\n(3) ERROR', function (err, sel) {
      console.log('Tag Status : '+sel);
      rfid.tagStatusSimulate(parseInt(sel));
      CLIStart(null);
    });
  }
  else if ('3'==data)  {
    stdio.question('Tag :', function (err, Tag) {
      console.log('Tag: '+Tag);
      rfid.tagReadSimulate({tagID: Tag});
      CLIStart(null);
    });
  }
  else {
    stdio.question('\nInput Data ? \n(1) GPS\n(2)RFID reader STATUS\n(3)RFID reader READ', function (err, input) {
      console.log("Selection :: "+input);
      CLIStart(input);
    });
  }
}

function onErr(err) {
    console.log(err);
    return 1;
}*/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
